#!/bin/bash

# Script untuk menginstal Docker, menyiapkan kontainer Ubuntu 20.04,
# dan membuat perintah 'menu' di host untuk mengakses kontainer tersebut.

# Fungsi untuk mencetak pesan dengan warna
print_info() {
  echo -e "\033[1;34m[INFO]\033[0m $1"
}

print_success() {
  echo -e "\033[1;32m[SUCCESS]\033[0m $1"
}

print_warning() {
  echo -e "\033[1;33m[WARNING]\033[0m $1"
}

print_error() {
  echo -e "\033[1;31m[ERROR]\033[0m $1"
}

# --- Variabel Konfigurasi ---
BASE_IMAGE="ubuntu:20.04"
CONTAINER_NAME="ubuntu20-dev-container"
HOST_MENU_COMMAND_PATH="/usr/local/bin/menu" # Lokasi perintah 'menu' di host

# --- Mulai Skrip Setup ---
print_info "Memulai skrip penyiapan akses Docker Ubuntu 20.04..."

# 1. Periksa dan Instal Docker jika belum ada
if ! command -v docker &> /dev/null
then
    print_info "Docker tidak ditemukan. Memulai instalasi Docker..."
    sudo apt-get update -y || { print_error "Gagal memperbarui daftar paket."; exit 1; }
    sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common || { print_error "Gagal menginstal paket prasyarat Docker."; exit 1; }
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg || { print_error "Gagal menambahkan kunci GPG Docker."; exit 1; }
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null || { print_error "Gagal menyiapkan repositori Docker."; exit 1; }
    sudo apt-get update -y || { print_error "Gagal memperbarui daftar paket setelah menambahkan repositori Docker."; exit 1; }
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin || { print_error "Gagal menginstal Docker Engine."; exit 1; }
    print_success "Docker berhasil diinstal."
    if sudo usermod -aG docker ${USER}; then
      print_warning "Pengguna ${USER} telah ditambahkan ke grup docker. Anda mungkin perlu logout dan login kembali atau menjalankan 'newgrp docker' atau reboot agar perubahan ini berlaku tanpa sudo untuk perintah docker."
    else
      print_warning "Gagal menambahkan pengguna ke grup docker. Anda mungkin perlu menjalankan perintah docker dengan sudo."
    fi
else
    print_info "Docker sudah terinstal."
fi

# Verifikasi Docker dapat berjalan
print_info "Memverifikasi instalasi Docker dengan menjalankan 'hello-world'..."
if sudo docker run hello-world &> /dev/null; then
    print_success "Docker berhasil diverifikasi."
else
    print_error "Verifikasi Docker gagal. Pastikan Docker terinstal dengan benar dan daemon Docker berjalan."
    print_error "Jika Anda baru saja menambahkan pengguna ke grup docker, Anda mungkin perlu logout dan login kembali atau reboot."
    exit 1
fi

# 2. Tarik image Ubuntu 20.04 jika belum ada
print_info "Memastikan image '${BASE_IMAGE}' tersedia..."
if ! sudo docker image inspect ${BASE_IMAGE} &> /dev/null; then
    print_info "Image '${BASE_IMAGE}' tidak ditemukan secara lokal. Menarik dari Docker Hub..."
    sudo docker pull ${BASE_IMAGE} || { print_error "Gagal menarik image ${BASE_IMAGE}."; exit 1; }
    print_success "Image '${BASE_IMAGE}' berhasil ditarik."
else
    print_info "Image '${BASE_IMAGE}' sudah ada secara lokal."
fi

# 3. Buat atau pastikan kontainer Ubuntu 20.04 ada dan berjalan (atau bisa dimulai)
if ! sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}\$"; then
    print_info "Kontainer '${CONTAINER_NAME}' tidak ditemukan. Membuat kontainer baru..."
    # Jalankan kontainer dalam mode detached (-d) dengan perintah yang membuatnya tetap berjalan
    # 'tail -f /dev/null' adalah trik umum untuk ini.
    sudo docker run -d --name ${CONTAINER_NAME} --restart unless-stopped ${BASE_IMAGE} tail -f /dev/null
    if [ $? -ne 0 ]; then
        print_error "Gagal membuat kontainer '${CONTAINER_NAME}'."; exit 1;
    fi
    print_success "Kontainer '${CONTAINER_NAME}' berhasil dibuat dan dijalankan di latar belakang."
    print_info "Di dalam kontainer, Anda bisa menginstal skrip atau software dengan 'apt update && apt install <nama_paket>'."
else
    print_info "Kontainer '${CONTAINER_NAME}' sudah ada."
    # Pastikan kontainer berjalan jika sudah ada
    if ! sudo docker ps --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}\$"; then
        print_info "Kontainer '${CONTAINER_NAME}' tidak sedang berjalan. Mencoba memulai..."
        sudo docker start ${CONTAINER_NAME} || { print_error "Gagal memulai kontainer '${CONTAINER_NAME}' yang sudah ada."; exit 1; }
        print_success "Kontainer '${CONTAINER_NAME}' berhasil dimulai."
    else
        print_info "Kontainer '${CONTAINER_NAME}' sudah berjalan."
    fi
fi

# 4. Buat perintah 'menu' di sistem host
print_info "Membuat perintah '${HOST_MENU_COMMAND_PATH}' di sistem host..."

# Konten untuk skrip /usr/local/bin/menu
HOST_MENU_SCRIPT_CONTENT="#!/bin/bash
# Skrip untuk masuk ke kontainer Docker ${CONTAINER_NAME}

CONTAINER_NAME=\"${CONTAINER_NAME}\" # Nama kontainer yang akan diakses

# Periksa apakah kontainer ada
if ! sudo docker ps -a --format '{{.Names}}' | grep -Eq \"^\${CONTAINER_NAME}\$\"; then
  echo -e \"\033[1;31m[ERROR]\033[0m Kontainer Docker '\${CONTAINER_NAME}' tidak ditemukan.\"
  echo -e \"Silakan jalankan skrip setup utama terlebih dahulu untuk membuat kontainer.\"
  exit 1
fi

# Periksa apakah kontainer berjalan, jika tidak, mulai
if ! sudo docker ps --format '{{.Names}}' | grep -Eq \"^\${CONTAINER_NAME}\$\"; then
  echo -e \"\033[1;34m[INFO]\033[0m Memulai kontainer '\${CONTAINER_NAME}'...\"
  sudo docker start \${CONTAINER_NAME}
  if [ \$? -ne 0 ]; then
    echo -e \"\033[1;31m[ERROR]\033[0m Gagal memulai kontainer '\${CONTAINER_NAME}'.\"
    exit 1
  fi
  # Beri sedikit waktu agar kontainer siap sepenuhnya
  # sleep 1
fi

echo -e \"\033[1;34m[INFO]\033[0m Masuk ke kontainer '\${CONTAINER_NAME}'...\"
echo -e \"Ketik \033[1;32m'exit'\033[0m untuk keluar dari sesi kontainer ini.\"
# Masuk ke kontainer menggunakan exec untuk mendapatkan shell baru
sudo docker exec -it \${CONTAINER_NAME} /bin/bash

echo -e \"\033[1;34m[INFO]\033[0m Keluar dari kontainer '\${CONTAINER_NAME}'. Kontainer tetap berjalan di latar belakang.\"
"

# Tulis skrip ke file dan buat executable
echo "${HOST_MENU_SCRIPT_CONTENT}" | sudo tee ${HOST_MENU_COMMAND_PATH} > /dev/null
if [ $? -ne 0 ]; then
    print_error "Gagal membuat file perintah '${HOST_MENU_COMMAND_PATH}'. Periksa hak akses."
    print_warning "Anda mungkin perlu membuat skrip ini secara manual atau menambahkan alias."
    exit 1
fi
sudo chmod +x ${HOST_MENU_COMMAND_PATH}
if [ $? -ne 0 ]; then
    print_error "Gagal membuat perintah '${HOST_MENU_COMMAND_PATH}' executable."
    exit 1
fi

print_success "Perintah '${HOST_MENU_COMMAND_PATH}' berhasil dibuat di sistem host Anda."
print_info "Anda sekarang dapat membuka terminal baru dan mengetik 'menu' untuk masuk ke kontainer Ubuntu 20.04."
print_info "Di dalam kontainer, ketik 'exit' untuk kembali ke host."

# 5. Instruksi Tambahan
print_info "\n--- Informasi Tambahan ---"
print_info "Kontainer '${CONTAINER_NAME}' akan tetap berjalan di latar belakang."
print_info "Untuk menghentikan kontainer '${CONTAINER_NAME}':"
print_info "  sudo docker stop ${CONTAINER_NAME}"
print_info "Untuk memulai kontainer '${CONTAINER_NAME}' jika dihentikan:"
print_info "  sudo docker start ${CONTAINER_NAME}"
print_info "Untuk menghapus kontainer '${CONTAINER_NAME}' (setelah dihentikan):"
print_info "  sudo docker rm ${CONTAINER_NAME}"
print_info "Untuk menghapus image '${BASE_IMAGE}' (jika tidak ada kontainer yang menggunakannya):"
print_info "  sudo docker rmi ${BASE_IMAGE}"

print_success "Skrip setup selesai."
