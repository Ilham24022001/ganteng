#!/bin/bash

# Script final untuk menginstal Docker, dan membuat/mengelola kontainer Ubuntu 20.04
# dengan port forwarding TCP/UDP terpisah yang benar.
# Port Dropbear diubah ke 149 (host).

# Fungsi untuk mencetak pesan dengan warna
print_info() {
  echo -e "\033[1;34m[INFO]\033[0m $1"
}

print_success() {
  echo -e "\033[1;32m[SUCCESS]\033[0m $1"
}

print_warning() {
  echo -e "\033[1;33m[WARNING]\033[0m $1"
}

print_error() {
  echo -e "\033[1;31m[ERROR]\033[0m $1"
}

# --- Variabel Konfigurasi ---
BASE_IMAGE="ubuntu:20.04"
CONTAINER_NAME="ubuntu20-services-container"
HOST_MENU_COMMAND_PATH="/usr/local/bin/menu"

# --- Port yang akan di-forward (HOST_PORT:CONTAINER_PORT) ---
# Sesuaikan HOST_PORT jika ada konflik di sistem Anda.
# CONTAINER_PORT adalah port yang harus didengarkan oleh layanan di dalam kontainer.
declare -A TARGET_PORTS=(
  ["XRAY_TCP"]="443:10001"
  ["SSHOWS_TCP"]="80:8080"
  ["HAPROXY_TCP"]="1080:1080"
  ["DROPBEAR_TCP"]="149:22" # <--- PORT DIUBAH DI SINI
  ["PPTP_TCP"]="1723:1723"
  ["L2TP_UDP_500"]="500:500"
  ["L2TP_UDP_4500"]="4500:4500"
  ["SSTP_TCP"]="4433:443"
)

# --- Mulai Skrip Setup ---
print_info "Memulai skrip penyiapan kontainer Docker dengan port forwarding terpisah..."
print_warning "Port Dropbear (SSH) di host akan diatur ke 149."
print_warning "Metode ini akan meneruskan port TCP/UDP yang ditentukan untuk kontainer."
print_warning "Untuk PPTP & L2TP/IPsec, fungsionalitas penuh TIDAK DIJAMIN karena protokol GRE/ESP tidak ditangani oleh port forwarding Docker standar (-p)."
echo "Tekan Enter untuk melanjutkan, atau Ctrl+C untuk membatalkan."
read -r

# 1. Periksa dan Instal Docker jika belum ada
if ! command -v docker &> /dev/null; then
    print_info "Docker tidak ditemukan. Memulai instalasi Docker..."
    sudo apt-get update -y > /dev/null || { print_error "Gagal memperbarui daftar paket."; exit 1; }
    sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common > /dev/null || { print_error "Gagal menginstal paket prasyarat Docker."; exit 1; }
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg || { print_error "Gagal menambahkan kunci GPG Docker."; exit 1; }
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null || { print_error "Gagal menyiapkan repositori Docker."; exit 1; }
    sudo apt-get update -y > /dev/null || { print_error "Gagal memperbarui daftar paket setelah menambahkan repositori Docker."; exit 1; }
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin > /dev/null || { print_error "Gagal menginstal Docker Engine."; exit 1; }
    print_success "Docker berhasil diinstal."
    if sudo usermod -aG docker ${USER}; then
      print_warning "Pengguna ${USER} telah ditambahkan ke grup docker. Anda mungkin perlu logout/login kembali."
    fi
else
    print_info "Docker sudah terinstal."
fi

# Verifikasi Docker
print_info "Memverifikasi instalasi Docker..."
if ! sudo docker run hello-world &> /dev/null; then print_error "Verifikasi Docker gagal."; exit 1; fi
print_success "Docker berhasil diverifikasi."

# 2. Tarik image Ubuntu 20.04
print_info "Memastikan image '${BASE_IMAGE}' tersedia..."
if ! sudo docker image inspect ${BASE_IMAGE} &> /dev/null; then
    sudo docker pull ${BASE_IMAGE} || { print_error "Gagal menarik image ${BASE_IMAGE}."; exit 1; }
fi
print_success "Image '${BASE_IMAGE}' siap digunakan."

# 3. Bangun string flag port dan string informasi
PORT_MAPPINGS_INFO_STRING=""
DOCKER_RUN_P_FLAGS=""
for service_port_key in "${!TARGET_PORTS[@]}"; do
    host_container_port="${TARGET_PORTS[$service_port_key]}"
    protocol="tcp" # default
    if [[ $service_port_key == *"_UDP_"* ]]; then
        protocol="udp"
    fi
    DOCKER_RUN_P_FLAGS+=" -p ${host_container_port}/${protocol}"
    PORT_MAPPINGS_INFO_STRING+="  - Host Port ${host_container_port%:*}(${protocol}) -> Container Port ${host_container_port#*:}(${protocol}) (${service_port_key%%_*} Service)\n"
done

# 4. Periksa dan Tangani Kontainer yang Sudah Ada atau Buat Baru
CREATE_NEW_CONTAINER=false
if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}\$"; then
    print_info "Kontainer dengan nama '${CONTAINER_NAME}' sudah ada."
    if sudo docker ps --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}\$"; then # Jika sedang berjalan
        print_success "Kontainer '${CONTAINER_NAME}' sedang berjalan."
        print_info "Skrip ini tidak akan mengubah konfigurasi port kontainer yang sedang berjalan."
        print_info "Berikut adalah konfigurasi port yang AKAN diterapkan skrip ini untuk kontainer BARU (jika Anda membuatnya ulang):"
        echo -e "${PORT_MAPPINGS_INFO_STRING}"
        print_info "Jika Anda ingin menerapkan konfigurasi port ini, Anda perlu menghapus kontainer lama ('sudo docker rm ${CONTAINER_NAME}') dan menjalankan skrip ini lagi."
    else # Jika ada tapi berhenti
        print_warning "Kontainer '${CONTAINER_NAME}' ada tetapi TIDAK sedang berjalan."
        print_warning "Ini MUNGKIN memiliki konfigurasi lama yang menyebabkan error saat coba dimulai."
        read -p "Apakah Anda ingin MENGHAPUS kontainer '${CONTAINER_NAME}' yang berhenti ini dan membuat yang baru dengan konfigurasi port di atas? (y/N): " respons
        if [[ "$respons" =~ ^[Yy]$ ]]; then
            print_info "Menghapus kontainer lama '${CONTAINER_NAME}'..."
            sudo docker rm ${CONTAINER_NAME} || { print_error "Gagal menghapus kontainer '${CONTAINER_NAME}'. Hapus manual dan jalankan skrip lagi."; exit 1; }
            print_success "Kontainer lama berhasil dihapus."
            CREATE_NEW_CONTAINER=true
        else
            print_info "Pembuatan kontainer baru dibatalkan. Konfigurasi port yang ada tidak diubah."
            print_info "Jika Anda mengalami error saat menjalankan 'menu', kemungkinan besar karena kontainer lama ini. Anda perlu menghapusnya secara manual ('sudo docker rm ${CONTAINER_NAME}') lalu jalankan skrip ini lagi untuk membuat yang baru."
        fi
    fi
else
    CREATE_NEW_CONTAINER=true
fi

if [ "$CREATE_NEW_CONTAINER" = true ]; then
    print_info "Membuat kontainer baru '${CONTAINER_NAME}' dengan port forwarding berikut:"
    echo -e "${PORT_MAPPINGS_INFO_STRING}"
    
    sudo docker rm ${CONTAINER_NAME} &> /dev/null # Coba hapus lagi untuk memastikan (abaikan error jika tidak ada)

    eval "sudo docker run -d --name ${CONTAINER_NAME} --cap-add=NET_ADMIN --restart unless-stopped ${DOCKER_RUN_P_FLAGS} ${BASE_IMAGE} tail -f /dev/null"

    if [ $? -ne 0 ]; then
        print_error "Gagal membuat kontainer '${CONTAINER_NAME}'.";
        print_error "Pastikan tidak ada kontainer lain dengan nama yang sama dan semua port host yang ditentukan tersedia (termasuk port 149).";
        exit 1;
    fi
    print_success "Kontainer '${CONTAINER_NAME}' berhasil dibuat dengan port forwarding yang ditentukan."
fi

# 5. Buat perintah 'menu' di sistem host
HOST_MENU_SCRIPT_CONTENT="#!/bin/bash
CONTAINER_NAME=\"${CONTAINER_NAME}\"
if ! sudo docker ps -a --format '{{.Names}}' | grep -Eq \"^\${CONTAINER_NAME}\$\"; then
  echo -e \"\033[1;31m[ERROR]\033[0m Kontainer Docker '\${CONTAINER_NAME}' tidak ditemukan. Jalankan skrip setup.\"
  exit 1
fi
if ! sudo docker ps --format '{{.Names}}' | grep -Eq \"^\${CONTAINER_NAME}\$\"; then # Jika tidak berjalan
  echo -e \"\033[1;34m[INFO]\033[0m Kontainer '\${CONTAINER_NAME}' tidak berjalan. Mencoba memulai...\"
  sudo docker start \${CONTAINER_NAME}
  if [ \$? -ne 0 ]; then
    echo -e \"\033[1;31m[ERROR]\033[0m Gagal memulai kontainer '\${CONTAINER_NAME}'.\"
    echo -e \"Ini mungkin karena konfigurasi lama yang bermasalah atau konflik port.\"
    echo -e \"Solusi: Pastikan port host tidak terpakai, lalu hapus kontainer ('sudo docker rm \${CONTAINER_NAME}') dan buat ulang dengan skrip setup.\"
    exit 1
  fi
  echo -e \"\033[1;32m[SUCCESS]\033[0m Kontainer '\${CONTAINER_NAME}' berhasil dimulai.\"
fi
echo -e \"\033[1;34m[INFO]\033[0m Masuk ke kontainer '\${CONTAINER_NAME}'... Ketik 'exit' untuk keluar.\"
sudo docker exec -it \${CONTAINER_NAME} /bin/bash
echo -e \"\033[1;34m[INFO]\033[0m Keluar dari kontainer '\${CONTAINER_NAME}'.\"
"
echo "${HOST_MENU_SCRIPT_CONTENT}" | sudo tee ${HOST_MENU_COMMAND_PATH} > /dev/null || { print_error "Gagal membuat file ${HOST_MENU_COMMAND_PATH}."; exit 1; }
sudo chmod +x ${HOST_MENU_COMMAND_PATH} || { print_error "Gagal chmod ${HOST_MENU_COMMAND_PATH}."; exit 1; }
print_success "Perintah '${HOST_MENU_COMMAND_PATH}' berhasil dibuat/diperbarui."
print_info "Ketik 'menu' di terminal baru untuk masuk ke kontainer. Ketik 'exit' di dalam kontainer untuk keluar."

# 6. Instruksi Layanan dan Port
print_info "\n--- PENTING: Konfigurasi Layanan di Dalam Kontainer ---"
print_info "Anda bertanggung jawab untuk MENGINSTAL dan MENGKONFIGURASI layanan di dalam kontainer agar mendengarkan pada CONTAINER_PORT yang sesuai."
echo ""
print_info "Port yang Diteruskan (Host Port -> Container Port) jika kontainer dibuat/dibuat ulang oleh skrip ini:"
echo -e "${PORT_MAPPINGS_INFO_STRING}"
echo ""
print_warning "PERHATIAN untuk PPTP dan L2TP/IPsec:"
print_warning "  - Port TCP 1723 (PPTP) dan UDP 500/4500 (L2TP/IPsec) TELAH DITERUSKAN."
print_warning "  - NAMUN, protokol GRE (untuk PPTP) dan ESP (untuk L2TP/IPsec) TIDAK DAPAT diteruskan oleh Docker hanya dengan '-p'."
print_warning "  - Ini berarti PPTP dan L2TP/IPsec kemungkinan besar TIDAK AKAN BERFUNGSI PENUH tanpa konfigurasi tambahan di sistem HOST Anda."
echo ""
print_info "Pastikan firewall host Anda (jika ada, misal 'ufw') mengizinkan trafik masuk ke HOST_PORT yang relevan, termasuk port 149."
print_warning "Untuk fungsionalitas routing/VPN secara umum, aktifkan IP forwarding di SISTEM HOST Anda: sudo sysctl -w net.ipv4.ip_forward=1"

print_success "Skrip setup selesai."
